// 3 js-ის კოდირების გზა:
// 1. inline - ელემენტის გამხსნელ თეგში,
// 2. internal - script თეგში დაწერილი js-ს კოდი,
// 3. external - ცალკე js-ს ფაილი, რომელიც აუცილებლად დაკავშირებული იქნება html ფაილთან


// ✍️ let - ამით იქმნება ცვლადი, რომლის გადაკეთებაც შესაძლებელია

// ✍️ const - ამით იქმნება ცვლადი როგორც let-ით, მაგრამ თუ ცვლადს შევქმნით const-ით მაშინ მას ვეღრ გადავაკეთებთ

// ✍️ console.log - მეჭდვა როგორც print

// ✍️ getElementById - იღებს აიდს ელემენტიდან

// ✍️ textContent - ით ვცვლით ტექსტს

// ✍️ typeof - ეს ჩვენ გვაჩვენებს თუ რა ტიპის ინფორმაცია შემოიტანა მომხმარებელმა (string, integer და ა.ს.შ)

// ✍️ confirm - ის აბრუნებს ან True-ს ან False-ს (გააჩნია მომხმარებელმა რომელ ღილაკს დააწკაპა ხელი)

// ✍️ slice-ს გადავცემთ 2 მნიშვნელობას, 1 ინდექსი ხოლო 2 რომლამდე უნდა გამოიტანოს
// მაგ: 
// const names = ['tazo', 'temo', 'nika', 'luka'];
// console.log(names.slice(1, 3))
// გამოიტანს: [ 'temo', 'nika' ]

// ✍️ .splice() გადაეცემა 2 მნიშნელობა index და რაოდენობა. პირველი გადავცემთ index-ს საიდანაც უნდა დაიწყოს წაშლა ხოლო მეორე 
// რაოდენობა ანუ რამდენი უნდა წაშალოს
// მაგ: პირველი ინდექსიდან წაშალოს 2 სახელი -->
// const names = ['tazo', 'temo', 'nika', 'luka'];
// names.splice(1, 2);
// console.log(names);
// გამოიტანს: [ 'tazo', 'luka' ]

// ✍️ pop - ამოშლის ბოლო ელემენტს
// const names = ['tazo', 'temo'];
// names.pop();
// console.log(names);
// გამოიტანს: [ 'tazo' ]

// ✍️ shift - ამოშლის პირველ ელემენტს, ხოლო 
// const names = ['tazo', 'temo'];
// names.shift()
// console.log(names)
// გამოიტანს: [ 'temo' ]

// ✍️ reverse - აბრუნებს სიას
// const names = ['tazo', 'temo', 'gio'];
// names.reverse();
// console.log(names);
// გამოიტანს: ['gio', 'temo', 'tazo']

// ✍️ .indexOf - ჩვენი სიიდან გადავცემთ ერთ ელემენტს და გამოგვიტანს ამ ელემენტის ინდექსს
// const names = ['tazo', 'temo', 'gio']
// console.log(names.indexOf('temo'))
// გამოიტანს: 1

// ✍️ lastIndexOf - ჩვენი სიიდან გადავცემთ ერთ ელემენტს და გამოგვიტანს ამ ელემენტის ბოლო ინდექსს
// const names = ['tazo', 'temo', 'gio', 'tazo']
// console.log(names.lastIndexOf('tazo'))
// გამოიტანს: 3

// ✍️ includes - რასაც მას გადავცემთ თუ ის მნიშვნელობა არის სიაში მაშინ გამოგვიტანს True-ს ხოლო თუ არაა False-ს
// const names = ['tazo', 'temo', 'gio', 'tazo']
// console.log(names.includes('ggg'))
// გამოიტანს: False


// ✍️ Math ✍️ -->

// ✍️ Math.round - დაამრგვალებს ელემენტს
// მაგ:
// 1) console.log(Math.round(3.1))
// გამოიტანს: 3
// 2) console.log(Math.round(3.6))
// გამოიტანს: 4

// ✍️ Math.trunc - ჩამოაჭრის და დააბრუნებს როცხვის მხოლოდ მთელ ნაწილს 
// მაგ:
// 1) console.log(Math.trunc(3.1))
// გამოიტანს: 3
// 2) console.log(Math.trunc(7.8))
// გამოიტანს: 7

// ✍️ Math.floor - დაამრგვალებს ყველაზე პატარა რიცხვამდე
// მაგ:
// 1) console.log(Math.floor(3.9))
// გამოიტანს: 3
// 2) console.log(Math.floor(6.7))
// გამოიტანს: 6
// ხოლო
// ✍️ Math.ceil - დაამრგვალებს ყველაზე დიდ რიცხვამდე
// მაგ:
// 1) console.log(Math.ceil(3.1))
// გამოიტანს: 4
// 2) console.log(Math.ceil(7.3))
// გამოიტანს: 8

// ✍️ Math.sign - თუ გადავცემთ დადებით რიცხვს მაშინ გამოგვიტანს 1-ს, ხოლო
// თუ გადავცემთ უარყოფით რიცხვს მაშინ გამოგვიტანს -1-ს
// მაგ:
// 1) console.log(Math.sign(3))
// გამოიტანს: 1
// 2) console.log(Math.sign(-3))
// გამოიტანს: -1

// ✍️ Math.pow - ხარისხში აყვანა. პირველს გადავცემთ რა უნდა აიყვანოს ხოლო შემდეგ რა,დენ ხარისხში უნდა აიყვანოს
// მაგ:
// console.log(Math.pow(5, 2)) (ანუ 5 * 5)
// გამოიტანს: 25

// ✍️ Math.sqrt - ფესვის ამოღება
// მაგ:
// console.log(Math.sqrt(25))
// გამოიტანს: 5

// ✍️ Math.random - რასაც გავუწერთ იმ რიცხვამდე გამოგვიტანს რენდომ რიცხვს
// მაგ:
// console.log(Math.random() * 10);
// შეიძლება გამოგვიტანოს 10-მდე ნებისმიერი რიხვი: 1, 5.3829, 9, და ასე შემდეგ.
// ხოლო
// ✍️ Math.trunc(Math.random() * 10) - რასაც გავუწერთ იმ რიცხვამდე გამოგვიტანს რენდომ რიცხვს. Math.random-ისგან განსხვავებით მას გამოაქვს მთელი რიცხვი. (ანუ თუ ჩვენ გვინდა რომ გამოგვიტანოს მთელი რიცხვი ჩვენ მას უნდა გავუწეროთ წინ Math.trunc)
// მაგ:
// console.log(Math.trunc(Math.random() * 10));
// შეიძლება გამოგვიტანოს 10-მდე ნებისმიერი რიხვი: 1, 5, 3, 8 და ასე შემდეგ.

// <-- Math


// ✍️ თარიღები - Date  ✍️  --->

// ✍️ new Date - თარიღი
// console.log(new Date);
// გამოგვიტანს: 2024-10-03T14:16:43.729Z

// ✍️ console.log(new Date);
// გამოგვიტანს ეხლანდელ თარიღს, დღეს, საათს

// ✍️ const d = new Date;
// console.log(d)
// გამოგვიტანს თარიღს

// ✍️ const dt = new Date(2024, 10, 3, 6, 33, 46, 34);
// console.log(dt)
// პირველი წელი, მეორე თვე, მესამე რიცხვი, მეოთხე საათი, მეხუთე წუთი, მეექვსე წამი, მეშვიდე წამის მეასედები

// შეერთებული, თანმიმდევრობით:
// 1-წელი, 2-თვე, 3-რიცხვი, 4-საათი, 5-წუთი, 6-წამი, 7-წამის მეასედები

// <---  თარიღები - Date


